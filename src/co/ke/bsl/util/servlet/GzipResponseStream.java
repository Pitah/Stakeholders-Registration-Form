package co.ke.bsl.util.servlet;import java.io.ByteArrayOutputStream;import java.io.IOException;import java.util.zip.GZIPOutputStream;import javax.servlet.ServletOutputStream;import javax.servlet.http.HttpServletResponse;import org.slf4j.Logger;import org.slf4j.LoggerFactory;public class GzipResponseStream extends ServletOutputStream {	private static final Logger log = LoggerFactory.getLogger(GzipResponseStream.class);	private HttpServletResponse response;	private ServletOutputStream servletOutStream;	private ByteArrayOutputStream byteOutStream;	private GZIPOutputStream gzipOutStream;	private boolean closed;	public GzipResponseStream(HttpServletResponse response) throws IOException {		this.response = response;		this.servletOutStream = response.getOutputStream();		this.byteOutStream = new ByteArrayOutputStream();		this.gzipOutStream = new GZIPOutputStream(this.byteOutStream);	}	public boolean isClosed() {		return this.closed;	}	public void close() throws IOException {		this.checkIfClosed("This stream has already been closed", false);		if (!this.closed) {			this.gzipOutStream.finish();			byte[] bytes = this.byteOutStream.toByteArray();			this.response.addHeader("Content-Length", Integer.toString(bytes.length));			this.response.addHeader("Content-Encoding", "gzip");			this.servletOutStream.write(bytes);			this.servletOutStream.flush();			this.servletOutStream.close();			this.closed = true;		}	}	public void flush() throws IOException {		this.checkIfClosed("Cannot flush a closed stream", false);		if (!this.closed) {			this.gzipOutStream.flush();		}	}	public void write(int bite) throws IOException {		this.checkIfClosed("Cannot write to a closed stream");		this.gzipOutStream.write((byte) bite);	}	public void write(byte[] bytes) throws IOException {		this.write(bytes, 0, bytes.length);	}	public void write(byte[] bytes, int offset, int length) throws IOException {		this.checkIfClosed("Cannot write to a closed stream");		this.gzipOutStream.write(bytes, offset, length);	}	private void checkIfClosed(String message) throws IOException {		this.checkIfClosed(message, true);	}	private void checkIfClosed(String message, boolean throwException) throws IOException {		if (this.closed) {			log.error(message);			if (throwException) {				throw new IOException(message);			}		}	}}